648   = Fetchmail Grows Up =
649
650   There I was with a neat and innovative design, code that I knew worked well because I used it every
651   day, and a burgeoning beta list. It gradually dawned on me that I was no longer engaged in a trivial
652   personal hack that might happen to be useful to few other people. I had my hands on a program that
653   every hacker with a Unix box and a SLIP/PPP mail connection really needs.
654
655   With the SMTP forwarding feature, it pulled far enough in front of the competition to potentially
656   become a "category killer", one of those classic programs that fills its niche so competently that
657   the alternatives are not just discarded but almost forgotten.
658
659   I think you can't really aim or plan for a result like this. You have to get pulled into it by
660   design ideas so powerful that afterward the results just seem inevitable, natural, even
661   foreordained. The only way to try for ideas like that is by having lots of ideasâ€”or by having the
662   engineering judgment to take other peoples' good ideas beyond where the originators thought they
663   could go.
664
665   Andy Tanenbaum had the original idea to build a simple native Unix for IBM PCs, for use as a
666   teaching tool (he called it Minix). Linus Torvalds pushed the Minix concept further than Andrew
667   probably thought it could goâ€”and it grew into something wonderful. In the same way (though on a
668   smaller scale), I took some ideas by Carl Harris and Harry Hochheiser and pushed them hard. Neither
669   of us was 'original' in the romantic way people think is genius. But then, most science and
670   engineering and software development isn't done by original genius, hacker mythology to the
671   contrary.
672
673   The results were pretty heady stuff all the sameâ€”in fact, just the kind of success every hacker
674   lives for! And they meant I would have to set my standards even higher. To make fetchmail as good as
675   I now saw it could be, I'd have to write not just for my own needs, but also include and support
676   features necessary to others but outside my orbit. And do that while keeping the program simple and
677   robust.
678
679   The first and overwhelmingly most important feature I wrote after realizing this was multidrop
680   supportâ€”the ability to fetch mail from mailboxes that had accumulated all mail for a group of users,
681   and then route each piece of mail to its individual recipients.
682
683   I decided to add the multidrop support partly because some users were clamoring for it, but mostly
684   because I thought it would shake bugs out of the single-drop code by forcing me to deal with
685   addressing in full generality. And so it proved.  Getting RFC 822 address parsing right took me a
686   remarkably long time, not because any individual piece of it is hard but because it involved a pile
687   of interdependent and fussy details.
688
689   But multidrop addressing turned out to be an excellent design decision as well. Here's how I knew:
690
691       14. Any tool should be useful in the expected way, but a truly great tool lends itself to uses
692           you never expected.
693
694   The unexpected use for multidrop fetchmail is to run mailing lists with the list kept, and alias
695   expansion done, on the client side of the Internet connection. This means someone running a personal
696   machine through an ISP account can manage a mailing list without continuing access to the ISP's
697   alias files.
698
699   Another important change demanded by my beta-testers was support for 8-bit MIME (Multipurpose
700   Internet Mail Extensions) operation. This was pretty easy to do, because I had been careful to keep
701   the code 8-bit clean (that is, to not press the 8th bit, unused in the ASCII character set, into
702   service to carry information within the program). Not because I anticipated the demand for this
703   feature, but rather in obedience to another rule:
704
705       15. When writing gateway software of any kind, take pains to disturb the data stream as little
706           as possibleâ€”and never throw away information unless the recipient forces you to!
707
708   Had I not obeyed this rule, 8-bit MIME support would have been difficult and buggy. As it was, all I
709   had to do is read the MIME standard (RFC 1652) and add a trivial bit of header-generation logic.
710
711   Some European users bugged me into adding an option to limit the number of messages retrieved per
712   session (so they can control costs from their expensive phone networks). I resisted this for a long
713   time, and I'm still not entirely happy about it. But if you're writing for the world, you have to
714   listen to your customersâ€”this doesn't change just because they're not paying you in money.
715
716   = A Few More Lessons from Fetchmail =
717
718   Before we go back to general software-engineering issues, there are a couple more specific lessons
719   from the fetchmail experience to ponder. Nontechnical readers can safely skip this section.
720
721   The rc (control) file syntax includes optional 'noise' keywords that are entirely ignored by the
722   parser. The English-like syntax they allow is considerably more readable than the traditional terse
723   keyword-value pairs you get when you strip them all out.
724
725   These started out as a late-night experiment when I noticed how much the rc file declarations were
726   beginning to resemble an imperative minilanguage. (This is also why I changed the original popclient
727   "server" keyword to "poll").
728
729   It seemed to me that trying to make that imperative minilanguage more like English might make it
730   easier to use. Now, although I'm a convinced partisan of the "make it a language" school of design
731   as exemplified by Emacs and HTML and many database engines, I am not normally a big fan of
732   "English-like" syntaxes.
733
734   Traditionally programmers have tended to favor control syntaxes that are very precise and compact
735   and have no redundancy at all. This is a cultural legacy from when computing resources were
736   expensive, so parsing stages had to be as cheap and simple as possible. English, with about 50%
737   redundancy, looked like a very inappropriate model then.
738
739   This is not my reason for normally avoiding English-like syntaxes; I mention it here only to
740   demolish it. With cheap cycles and core, terseness should not be an end in itself. Nowadays it's
741   more important for a language to be convenient for humans than to be cheap for the computer.
742
743   There remain, however, good reasons to be wary. One is the complexity cost of the parsing stageâ€”you
744   don't want to raise that to the point where it's a significant source of bugs and user confusion in
745   itself. Another is that trying to make a language syntax English-like often demands that the
746   "English" it speaks be bent seriously out of shape, so much so that the superficial resemblance to
747   natural language is as confusing as a traditional syntax would have been. (You see this bad effect
748   in a lot of so-called "fourth generation" and commercial database-query languages.)
749
750   The fetchmail control syntax seems to avoid these problems because the language domain is extremely
751   restricted. It's nowhere near a general-purpose language; the things it says simply are not very
752   complicated, so there's little potential for confusion in moving mentally between a tiny subset of
753   English and the actual control language. I think there may be a broader lesson here:
754
755       16. When your language is nowhere near Turing-complete, syntactic sugar can be your friend.
756
757   Another lesson is about security by obscurity. Some fetchmail users asked me to change the software
758   to store passwords encrypted in the rc file, so snoopers wouldn't be able to casually see them.
759
760   I didn't do it, because this doesn't actually add protection. Anyone who's acquired permissions to
761   read your rc file will be able to run fetchmail as you anywayâ€”and if it's your password they're
762   after, they'd be able to rip the necessary decoder out of the fetchmail code itself to get it.
763
764   All .fetchmailrc password encryption would have done is give a false sense of security to people who
765   don't think very hard. The general rule here is:
766
767       17. A security system is only as secure as its secret. Beware of pseudo-secrets.
768
769
770   = Necessary Preconditions for the Bazaar Style =
771
772   Early reviewers and test audiences for this essay consistently raised questions about the
773   preconditions for successful bazaar-style development, including both the qualifications of the
774   project leader and the state of code at the time one goes public and starts to try to build a
775   co-developer community.
776
777   It's fairly clear that one cannot code from the ground up in bazaar style [IN]. One can test, debug
778   and improve in bazaar style, but it would be very hard to originate a project in bazaar mode. Linus
779   didn't try it. I didn't either.  Your nascent developer community needs to have something runnable
780   and testable to play with.
781
782   When you start community-building, what you need to be able to present is a plausible promise. Your
783   program doesn't have to work particularly well. It can be crude, buggy, incomplete, and poorly
784   documented. What it must not fail to do is (a) run, and (b) convince potential co-developers that it
785   can be evolved into something really neat in the foreseeable future.
786
787   Linux and fetchmail both went public with strong, attractive basic designs. Many people thinking
788   about the bazaar model as I have presented it have correctly considered this critical, then jumped
789   from that to the conclusion that a high degree of design intuition and cleverness in the project
790   leader is indispensable.
791
792   But Linus got his design from Unix. I got mine initially from the ancestral popclient (though it
793   would later change a great deal, much more proportionately speaking than has Linux). So does the
794   leader/coordinator for a bazaar-style effort really have to have exceptional design talent, or can
795   he get by through leveraging the design talent of others?
796
797   I think it is not critical that the coordinator be able to originate designs of exceptional
798   brilliance, but it is absolutely critical that the coordinator be able to recognize good design
799   ideas from others.
800
801   Both the Linux and fetchmail projects show evidence of this. Linus, while not (as previously
802   discussed) a spectacularly original designer, has displayed a powerful knack for recognizing good
803   design and integrating it into the Linux kernel.  And I have already described how the single most
804   powerful design idea in fetchmail (SMTP forwarding) came from somebody else.
805
806   Early audiences of this essay complimented me by suggesting that I am prone to undervalue design
807   originality in bazaar projects because I have a lot of it myself, and therefore take it for granted.
808   There may be some truth to this; design (as opposed to coding or debugging) is certainly my
809   strongest skill.
810
811   But the problem with being clever and original in software design is that it gets to be a habit—you
812   start reflexively making things cute and complicated when you should be keeping them robust and
813   simple. I have had projects crash on me because I made this mistake, but I managed to avoid this
814   with fetchmail.
815
816   So I believe the fetchmail project succeeded partly because I restrained my tendency to be clever;
817   this argues (at least) against design originality being essential for successful bazaar projects.
818   And consider Linux. Suppose Linus Torvalds had been trying to pull off fundamental innovations in
819   operating system design during the development; does it seem at all likely that the resulting kernel
820   would be as stable and successful as what we have?
821
822   A certain base level of design and coding skill is required, of course, but I expect almost anybody
823   seriously thinking of launching a bazaar effort will already be above that minimum. The open-source
824   community's internal market in reputation exerts subtle pressure on people not to launch development
825   efforts they're not competent to follow through on. So far this seems to have worked pretty well.
826
827   There is another kind of skill not normally associated with software development which I think is as
828   important as design cleverness to bazaar projects—and it may be more important. A bazaar project
829   coordinator or leader must have good people and communications skills.
830
831   This should be obvious. In order to build a development community, you need to attract people,
832   interest them in what you're doing, and keep them happy about the amount of work they're doing.
833   Technical sizzle will go a long way towards accomplishing this, but it's far from the whole story.
834   The personality you project matters, too.
835
836   It is not a coincidence that Linus is a nice guy who makes people like him and want to help him.
837   It's not a coincidence that I'm an energetic extrovert who enjoys working a crowd and has some of
838   the delivery and instincts of a stand-up comic. To make the bazaar model work, it helps enormously
839   if you have at least a little skill at charming people.
840
841   = The Social Context of Open-Source Software =
842
843   It is truly written: the best hacks start out as personal solutions to the author's everyday
844   problems, and spread because the problem turns out to be typical for a large class of users. This
845   takes us back to the matter of rule 1, restated in a perhaps more useful way:
846
847       18. To solve an interesting problem, start by finding a problem that is interesting to you.
848
849   So it was with Carl Harris and the ancestral popclient, and so with me and fetchmail. But this has
850   been understood for a long time. The interesting point, the point that the histories of Linux and
851   fetchmail seem to demand we focus on, is the next stage—the evolution of software in the presence of
852   a large and active community of users and co-developers.
853
854   In The Mythical Man-Month, Fred Brooks observed that programmer time is not fungible; adding
855   developers to a late software project makes it later. As we've seen previously, he argued that the
856   complexity and communication costs of a project rise with the square of the number of developers,
857   while work done only rises linearly. Brooks's Law has been widely regarded as a truism. But we've
858   examined in this essay an number of ways in which the process of open-source development falsifies
859   the assumptionms behind it—and, empirically, if Brooks's Law were the whole picture Linux would be
860   impossible.
861
862   Gerald Weinberg's classic The Psychology of Computer Programming supplied what, in hindsight, we can
863   see as a vital correction to Brooks. In his discussion of "egoless programming", Weinberg observed
864   that in shops where developers are not territorial about their code, and encourage other people to
865   look for bugs and potential improvements in it, improvement happens dramatically faster than
866   elsewhere. (Recently, Kent Beck's 'extreme programming' technique of deploying coders in pairs
867   looking over one anothers' shoulders might be seen as an attempt to force this effect.)
868
869   Weinberg's choice of terminology has perhaps prevented his analysis from gaining the acceptance it
870   deserved—one has to smile at the thought of describing Internet hackers as "egoless". But I think
871   his argument looks more compelling today than ever.
872
873   The bazaar method, by harnessing the full power of the "egoless programming" effect, strongly
874   mitigates the effect of Brooks's Law. The principle behind Brooks's Law is not repealed, but given a
875   large developer population and cheap communications its effects can be swamped by competing
876   nonlinearities that are not otherwise visible. This resembles the relationship between Newtonian and
877   Einsteinian physics—the older system is still valid at low energies, but if you push mass and
878   velocity high enough you get surprises like nuclear explosions or Linux.
879
880   The history of Unix should have prepared us for what we're learning from Linux (and what I've
881   verified experimentally on a smaller scale by deliberately copying Linus's methods [EGCS]). That is,
882   while coding remains an essentially solitary activity, the really great hacks come from harnessing
883   the attention and brainpower of entire communities. The developer who uses only his or her own brain
884   in a closed project is going to fall behind the developer who knows how to create an open,
885   evolutionary context in which feedback exploring the design space, code contributions, bug-spotting,
886   and other improvements come from from hundreds (perhaps thousands) of people.
887
888   But the traditional Unix world was prevented from pushing this approach to the ultimate by several
889   factors. One was the legal contraints of various licenses, trade secrets, and commercial interests.
890   Another (in hindsight) was that the Internet wasn't yet good enough.
891
892   Before cheap Internet, there were some geographically compact communities where the culture
893   encouraged Weinberg's "egoless" programming, and a developer could easily attract a lot of skilled
894   kibitzers and co-developers. Bell Labs, the MIT AI and LCS labs, UC Berkeley—these became the home
895   of innovations that are legendary and still potent.
896
897   Linux was the first project for which a conscious and successful effort to use the entire world as
898   its talent pool was made. I don't think it's a coincidence that the gestation period of Linux
899   coincided with the birth of the World Wide Web, and that Linux left its infancy during the same
900   period in 1993–1994 that saw the takeoff of the ISP industry and the explosion of mainstream
901   interest in the Internet. Linus was the first person who learned how to play by the new rules that
902   pervasive Internet access made possible.
903
904   While cheap Internet was a necessary condition for the Linux model to evolve, I think it was not by
905   itself a sufficient condition. Another vital factor was the development of a leadership style and
906   set of cooperative customs that could allow developers to attract co-developers and get maximum
907   leverage out of the medium.
908
909   But what is this leadership style and what are these customs? They cannot be based on power
910   relationships—and even if they could be, leadership by coercion would not produce the results we
911   see. Weinberg quotes the autobiography of the 19th-century Russian anarchist Pyotr Alexeyvich
912   Kropotkin's Memoirs of a Revolutionist to good effect on this subject:
913
914   Having been brought up in a serf-owner's family, I entered active life, like all young men of my
915   time, with a great deal of confidence in the necessity of commanding, ordering, scolding, punishing
916   and the like. But when, at an early stage, I had to manage serious enterprises and to deal with
917   [free] men, and when each mistake would lead at once to heavy consequences, I began to appreciate
918   the difference between acting on the principle of command and discipline and acting on the principle
919   of common understanding. The former works admirably in a military parade, but it is worth nothing
920   where real life is concerned, and the aim can be achieved only through the severe effort of many
921   converging wills.
922
923   The "severe effort of many converging wills" is precisely what a project like Linux requires—and the
924   "principle of command" is effectively impossible to apply among volunteers in the anarchist's
925   paradise we call the Internet. To operate and compete effectively, hackers who want to lead
926   collaborative projects have to learn how to recruit and energize effective communities of interest
927   in the mode vaguely suggested by Kropotkin's "principle of understanding".  They must learn to use
928   Linus's Law.[SP]
929
930   Earlier I referred to the "Delphi effect" as a possible explanation for Linus's Law. But more
931   powerful analogies to adaptive systems in biology and economics also irresistably suggest
932   themselves. The Linux world behaves in many respects like a free market or an ecology, a collection
933   of selfish agents attempting to maximize utility which in the process produces a self-correcting
934   spontaneous order more elaborate and efficient than any amount of central planning could have
935   achieved. Here, then, is the place to seek the "principle of understanding".
936
937   The "utility function" Linux hackers are maximizing is not classically economic, but is the
938   intangible of their own ego satisfaction and reputation among other hackers. (One may call their
939   motivation "altruistic", but this ignores the fact that altruism is itself a form of ego
940   satisfaction for the altruist). Voluntary cultures that work this way are not actually uncommon; one
941   other in which I have long participated is science fiction fandom, which unlike hackerdom has long
942   explicitly recognized "egoboo" (ego-boosting, or the enhancement of one's reputation among other
943   fans) as the basic drive behind volunteer activity.
944
945   Linus, by successfully positioning himself as the gatekeeper of a project in which the development
946   is mostly done by others, and nurturing interest in the project until it became self-sustaining, has
947   shown an acute grasp of Kropotkin's "principle of shared understanding". This quasi-economic view of
948   the Linux world enables us to see how that understanding is applied.
949
950   We may view Linus's method as a way to create an efficient market in "egoboo"—to connect the
951   selfishness of individual hackers as firmly as possible to difficult ends that can only be achieved
952   by sustained cooperation. With the fetchmail project I have shown (albeit on a smaller scale) that
953   his methods can be duplicated with good results. Perhaps I have even done it a bit more consciously
954   and systematically than he.
955
956   Many people (especially those who politically distrust free markets) would expect a culture of
957   self-directed egoists to be fragmented, territorial, wasteful, secretive, and hostile. But this
958   expectation is clearly falsified by (to give just one example) the stunning variety, quality, and
959   depth of Linux documentation. It is a hallowed given that programmers hate documenting; how is it,
960   then, that Linux hackers generate so much documentation? Evidently Linux's free market in egoboo
961   works better to produce virtuous, other-directed behavior than the massively-funded documentation
962   shops of commercial software producers.
963
964   Both the fetchmail and Linux kernel projects show that by properly rewarding the egos of many other
965   hackers, a strong developer/coordinator can use the Internet to capture the benefits of having lots
966   of co-developers without having a project collapse into a chaotic mess. So to Brooks's Law I
967   counter-propose the following:
968
969       19: Provided the development coordinator has a communications medium at least as good as the
970           Internet, and knows how to lead without coercion, many heads are inevitably better than one.
971
972   I think the future of open-source software will increasingly belong to people who know how to play
973   Linus's game, people who leave behind the cathedral and embrace the bazaar. This is not to say that
974   individual vision and brilliance will no longer matter; rather, I think that the cutting edge of
975   open-source software will belong to people who start from individual vision and brilliance, then
976   amplify it through the effective construction of voluntary communities of interest.
977
978   Perhaps this is not only the future of open-source software. No closed-source developer can match
979   the pool of talent the Linux community can bring to bear on a problem. Very few could afford even to
980   hire the more than 200 (1999: 600, 2000: 800) people who have contributed to fetchmail!
981
982   Perhaps in the end the open-source culture will triumph not because cooperation is morally right or
983   software "hoarding" is morally wrong (assuming you believe the latter, which neither Linus nor I
984   do), but simply because the closed-source world cannot win an evolutionary arms race with
985   open-source communities that can put orders of magnitude more skilled time into a problem.
986
987   = On Management and the Maginot Line =
988
989   The original Cathedral and Bazaar paper of 1997 ended with the vision above—that of happy networked
990   hordes of programmer/anarchists outcompeting and overwhelming the hierarchical world of conventional
991   closed software.
992
993   A good many skeptics weren't convinced, however; and the questions they raise deserve a fair
994   engagement. Most of the objections to the bazaar argument come down to the claim that its proponents
995   have underestimated the productivity-multiplying effect of conventional management.
996
997   Traditionally-minded software-development managers often object that the casualness with which
998   project groups form and change and dissolve in the open-source world negates a significant part of
999   the apparent advantage of numbers that the open-source community has over any single closed-source
1000  developer. They would observe that in software development it is really sustained effort over time
1001  and the degree to which customers can expect continuing investment in the product that matters, not
1002  just how many people have thrown a bone in the pot and left it to simmer.
1003
1004  There is something to this argument, to be sure; in fact, I have developed the idea that expected
1005  future service value is the key to the economics of software production in the essay The Magic
1006  Cauldron.
1007
1008  But this argument also has a major hidden problem; its implicit assumption that open-source
1009  development cannot deliver such sustained effort. In fact, there have been open-source projects that
1010  maintained a coherent direction and an effective maintainer community over quite long periods of
1011  time without the kinds of incentive structures or institutional controls that conventional
1012  management finds essential. The development of the GNU Emacs editor is an extreme and instructive
1013  example; it has absorbed the efforts of hundreds of contributors over 15 years into a unified
1014  architectural vision, despite high turnover and the fact that only one person (its author) has been
1015  continuously active during all that time. No closed-source editor has ever matched this longevity
1016  record.
1017
1018  This suggests a reason for questioning the advantages of conventionally-managed software development
1019  that is independent of the rest of the arguments over cathedral vs. bazaar mode. If it's possible
1020  for GNU Emacs to express a consistent architectural vision over 15 years, or for an operating system
1021  like Linux to do the same over 8 years of rapidly changing hardware and platform technology; and if
1022  (as is indeed the case) there have been many well-architected open-source projects of more than 5
1023  years duration -- then we are entitled to wonder what, if anything, the tremendous overhead of
1024  conventionally-managed development is actually buying us.
1025
1026  Whatever it is certainly doesn't include reliable execution by deadline, or on budget, or to all
1027  features of the specification; it's a rare 'managed' project that meets even one of these goals, let
1028  alone all three. It also does not appear to be ability to adapt to changes in technology and
1029  economic context during the project lifetime, either; the open-source community has proven far more
1030  effective on that score (as one can readily verify, for example, by comparing the 30-year history of
1031  the Internet with the short half-lives of proprietary networking technologies—or the cost of the
1032  16-bit to 32-bit transition in Microsoft Windows with the nearly effortless upward migration of
1033  Linux during the same period, not only along the Intel line of development but to more than a dozen
1034  other hardware platforms, including the 64-bit Alpha as well).
1035
1036  One thing many people think the traditional mode buys you is somebody to hold legally liable and
1037  potentially recover compensation from if the project goes wrong. But this is an illusion; most
1038  software licenses are written to disclaim even warranty of merchantability, let alone
1039  performance—and cases of successful recovery for software nonperformance are vanishingly rare. Even
1040  if they were common, feeling comforted by having somebody to sue would be missing the point. You
1041  didn't want to be in a lawsuit; you wanted working software.
1042
1043  So what is all that management overhead buying?
1044
1045  In order to understand that, we need to understand what software development managers believe they
1046  do. A woman I know who seems to be very good at this job says software project management has five
1047  functions:
1048
1049      * To define goals and keep everybody pointed in the same direction
1050
1051      * To monitor and make sure crucial details don't get skipped
1052
1053      * To motivate people to do boring but necessary drudgework
1054
1055      * To organize the deployment of people for best productivity
1056
1057      * To marshal resources needed to sustain the project
1058
1059  Apparently worthy goals, all of these; but under the open-source model, and in its surrounding
1060  social context, they can begin to seem strangely irrelevant. We'll take them in reverse order.
1061
1062  My friend reports that a lot of resource marshalling is basically defensive; once you have your
1063  people and machines and office space, you have to defend them from peer managers competing for the
1064  same resources, and from higher-ups trying to allocate the most efficient use of a limited pool.
1065
1066  But open-source developers are volunteers, self-selected for both interest and ability to contribute
1067  to the projects they work on (and this remains generally true even when they are being paid a salary
1068  to hack open source.) The volunteer ethos tends to take care of the 'attack' side of
1069  resource-marshalling automatically; people bring their own resources to the table. And there is
1070  little or no need for a manager to 'play defense' in the conventional sense.
1071
1072  Anyway, in a world of cheap PCs and fast Internet links, we find pretty consistently that the only
1073  really limiting resource is skilled attention. Open-source projects, when they founder, essentially
1074  never do so for want of machines or links or office space; they die only when the developers
1075  themselves lose interest.
1076
1077  That being the case, it's doubly important that open-source hackers organize themselves for maximum
1078  productivity by self-selection—and the social milieu selects ruthlessly for competence. My friend,
1079  familiar with both the open-source world and large closed projects, believes that open source has
1080  been successful partly because its culture only accepts the most talented 5% or so of the
1081  programming population. She spends most of her time organizing the deployment of the other 95%, and
1082  has thus observed first-hand the well-known variance of a factor of one hundred in productivity
1083  between the most able programmers and the merely competent.
1084
1085  The size of that variance has always raised an awkward question: would individual projects, and the
1086  field as a whole, be better off without more than 50% of the least able in it? Thoughtful managers
1087  have understood for a long time that if conventional software management's only function were to
1088  convert the least able from a net loss to a marginal win, the game might not be worth the candle.
1089
1090  The success of the open-source community sharpens this question considerably, by providing hard
1091  evidence that it is often cheaper and more effective to recruit self-selected volunteers from the
1092  Internet than it is to manage buildings full of people who would rather be doing something else.
1093
1094  Which brings us neatly to the question of motivation. An equivalent and often-heard way to state my
1095  friend's point is that traditional development management is a necessary compensation for poorly
1096  motivated programmers who would not otherwise turn out good work.
1097
1098  This answer usually travels with a claim that the open-source community can only be relied on only
1099  to do work that is 'sexy' or technically sweet; anything else will be left undone (or done only
1100  poorly) unless it's churned out by money-motivated cubicle peons with managers cracking whips over
1101  them. I address the psychological and social reasons for being skeptical of this claim in
1102  Homesteading the Noosphere. For present purposes, however, I think it's more interesting to point
1103  out the implications of accepting it as true.
1104
1105  If the conventional, closed-source, heavily-managed style of software development is really defended
1106  only by a sort of Maginot Line of problems conducive to boredom, then it's going to remain viable in
1107  each individual application area for only so long as nobody finds those problems really interesting
1108  and nobody else finds any way to route around them.  Because the moment there is open-source
1109  competition for a 'boring' piece of software, customers are going to know that it was finally
1110  tackled by someone who chose that problem to solve because of a fascination with the problem
1111  itself—which, in software as in other kinds of creative work, is a far more effective motivator than
1112  money alone.
1113
1114  Having a conventional management structure solely in order to motivate, then, is probably good
1115  tactics but bad strategy; a short-term win, but in the longer term a surer loss.
1116
1117  So far, conventional development management looks like a bad bet now against open source on two
1118  points (resource marshalling, organization), and like it's living on borrowed time with respect to a
1119  third (motivation). And the poor beleaguered conventional manager is not going to get any succour
1120  from the monitoring issue; the strongest argument the open-source community has is that
1121  decentralized peer review trumps all the conventional methods for trying to ensure that details
1122  don't get slipped.
1123
1124  Can we save defining goals as a justification for the overhead of conventional software project
1125  management? Perhaps; but to do so, we'll need good reason to believe that management committees and
1126  corporate roadmaps are more successful at defining worthy and widely shared goals than the project
1127  leaders and tribal elders who fill the analogous role in the open-source world.
1128
1129  That is on the face of it a pretty hard case to make. And it's not so much the open-source side of
1130  the balance (the longevity of Emacs, or Linus Torvalds's ability to mobilize hordes of developers
1131  with talk of "world domination") that makes it tough. Rather, it's the demonstrated awfulness of
1132  conventional mechanisms for defining the goals of software projects.
1133
1134  One of the best-known folk theorems of software engineering is that 60% to 75% of conventional
1135  software projects either are never completed or are rejected by their intended users. If that range
1136  is anywhere near true (and I've never met a manager of any experience who disputes it) then more
1137  projects than not are being aimed at goals that are either (a) not realistically attainable, or (b)
1138  just plain wrong.
1139
1140  This, more than any other problem, is the reason that in today's software engineering world the very
1141  phrase "management committee" is likely to send chills down the hearer's spine—even (or perhaps
1142  especially) if the hearer is a manager. The days when only programmers griped about this pattern are
1143  long past; Dilbert cartoons hang over executives' desks now.
1144
1145  Our reply, then, to the traditional software development manager, is simple—if the open-source
1146  community has really underestimated the value of conventional management, why do so many of you
1147  display contempt for your own process?
1148
1149  Once again the example of the open-source community sharpens this question considerably—because we
1150  have fun doing what we do. Our creative play has been racking up technical, market-share, and
1151  mind-share successes at an astounding rate.  We're proving not only that we can do better software,
1152  but that joy is an asset.
1153
1154  Two and a half years after the first version of this essay, the most radical thought I can offer to
1155  close with is no longer a vision of an open-source–dominated software world; that, after all, looks
1156  plausible to a lot of sober people in suits these days.
1157
1158  Rather, I want to suggest what may be a wider lesson about software, (and probably about every kind
1159  of creative or professional work). Human beings generally take pleasure in a task when it falls in a
1160  sort of optimal-challenge zone; not so easy as to be boring, not too hard to achieve. A happy
1161  programmer is one who is neither underutilized nor weighed down with ill-formulated goals and
1162  stressful process friction. Enjoyment predicts efficiency.
1163
1164  Relating to your own work process with fear and loathing (even in the displaced, ironic way
1165  suggested by hanging up Dilbert cartoons) should therefore be regarded in itself as a sign that the
1166  process has failed. Joy, humor, and playfulness are indeed assets; it was not mainly for the
1167  alliteration that I wrote of "happy hordes" above, and it is no mere joke that the Linux mascot is a
1168  cuddly, neotenous penguin.
1169
1170  It may well turn out that one of the most important effects of open source's success will be to
1171  teach us that play is the most economically efficient mode of creative work.
1172
1173  = Epilog: Netscape Embraces the Bazaar =
